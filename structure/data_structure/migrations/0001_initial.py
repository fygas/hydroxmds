# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-06-28 13:49
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('hybrid', '0001_initial'),
        ('structure', '0001_initial'),
        ('common', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataStructure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.URLField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('version', models.CharField(default='1.0', max_length=255, validators=[django.core.validators.RegexValidator(re.compile('[0-9]+(\\.[0-9]+)*', 32), 'Enter a value of type VersionType that has pattern "([0-9]+(\\.[0-9]+)*)"', 'invalid_pattern')])),
                ('valid_from', models.DateTimeField(blank=True, null=True)),
                ('valid_to', models.DateTimeField(blank=True, null=True)),
                ('id_code', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$', 32), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='id')),
                ('is_final', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=255)),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hybrid.Organisation')),
                ('annotations', models.ManyToManyField(blank=True, related_name='_datastructure_annotations_+', to='common.Annotation')),
                ('attribute_annotations', models.ManyToManyField(related_name='_datastructure_attribute_annotations_+', to='common.Annotation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataStructureComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField(blank=True, null=True)),
                ('is_concept_role', models.BooleanField(default=True)),
                ('primary_measure_attached', models.BooleanField(default=False)),
                ('annotations', models.ManyToManyField(blank=True, related_name='_datastructurecomponent_annotations_+', to='common.Annotation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataStructureComponentBase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.URLField(blank=True, null=True)),
                ('id_code', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$', 32), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='id')),
                ('object_type', models.CharField(blank=True, choices=[(None, 'None'), ('Any', 'Any'), ('Agency', 'Agency'), ('AgencyScheme', 'AgencyScheme'), ('AttachmentConstraint', 'AttachmentConstraint'), ('Attribute', 'Attribute'), ('AttributeDescriptor', 'AttributeDescriptor'), ('Categorisation', 'Categorisation'), ('Category', 'Category'), ('CategorySchemeMap', 'CategorySchemeMap'), ('CategoryScheme', 'CategoryScheme'), ('Code', 'Code'), ('CodeMap', 'CodeMap'), ('Codelist', 'Codelist'), ('CodelistMap', 'CodelistMap'), ('ComponentMap', 'ComponentMap'), ('Concept', 'Concept'), ('ConceptMap', 'ConceptMap'), ('ConceptScheme', 'ConceptScheme'), ('ConceptSchemeMap', 'ConceptSchemeMap'), ('Constraint', 'Constraint'), ('ConstraintTarget', 'ConstraintTarget'), ('ContentConstraint', 'ContentConstraint'), ('Dataflow', 'Dataflow'), ('DataConsumer', 'DataConsumer'), ('DataConsumerScheme', 'DataConsumerScheme'), ('DataProvider', 'DataProvider'), ('DataProviderScheme', 'DataProviderScheme'), ('DataSetTarget', 'DataSetTarget'), ('DataStructure', 'DataStructure'), ('Dimension', 'Dimension'), ('DimensionDescriptor', 'DimensionDescriptor'), ('DimensionDescriptorValuesTarget', 'DimensionDescriptorValuesTarget'), ('GroupDimensionDescriptor', 'GroupDimensionDescriptor'), ('HierarchicalCode', 'HierarchicalCode'), ('HierarchicalCodelist', 'HierarchicalCodelist'), ('Hierarchy', 'Hierarchy'), ('HybridCodelistMap', 'HybridCodelistMap'), ('HybridCodeMap', 'HybridCodeMap'), ('IdentifiableObjectTarget', 'IdentifiableObjectTarget'), ('Level', 'Level'), ('MeasureDescriptor', 'MeasureDescriptor'), ('MeasureDimension', 'MeasureDimension'), ('Metadataflow', 'Metadataflow'), ('MetadataAttribute', 'MetadataAttribute'), ('MetadataSet', 'MetadataSet'), ('MetadataStructure', 'MetadataStructure'), ('MetadataTarget', 'MetadataTarget'), ('Organisation', 'Organisation'), ('OrganisationMap', 'OrganisationMap'), ('OrganisationScheme', 'OrganisationScheme'), ('OrganisationSchemeMap', 'OrganisationSchemeMap'), ('OrganisationUnit', 'OrganisationUnit'), ('OrganisationUnitScheme', 'OrganisationUnitScheme'), ('PrimaryMeasure', 'PrimaryMeasure'), ('Process', 'Process'), ('ProcessStep', 'ProcessStep'), ('ProvisionAgreement', 'ProvisionAgreement'), ('ReportingCategory', 'ReportingCategory'), ('ReportingCategoryMap', 'ReportingCategoryMap'), ('ReportingTaxonomy', 'ReportingTaxonomy'), ('ReportingTaxonomyMap', 'ReportingTaxonomyMap'), ('ReportingYearStartDay', 'ReportingYearStartDay'), ('ReportPeriodTarget', 'ReportPeriodTarget'), ('ReportStructure', 'ReportStructure'), ('StructureMap', 'StructureMap'), ('StructureSet', 'StructureSet'), ('TimeDimension', 'TimeDimension'), ('Transition', 'Transition')], max_length=255, null=True)),
                ('concept', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='structure.Concept')),
            ],
        ),
        migrations.CreateModel(
            name='DataStructureComponentGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.URLField(blank=True, null=True)),
                ('id_code', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$', 32), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='id')),
                ('annotations', models.ManyToManyField(blank=True, related_name='_datastructurecomponentgroup_annotations_+', to='common.Annotation')),
                ('group', models.ManyToManyField(to='data_structure.DataStructureComponentBase')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='datastructurecomponent',
            name='base_component',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_structure.DataStructureComponentBase'),
        ),
        migrations.AddField(
            model_name='datastructurecomponent',
            name='dims_attached',
            field=models.ManyToManyField(related_name='_datastructurecomponent_dims_attached_+', to='data_structure.DataStructureComponent'),
        ),
        migrations.AddField(
            model_name='datastructurecomponent',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comp_group', to='data_structure.DataStructureComponentGroup'),
        ),
        migrations.AddField(
            model_name='datastructurecomponent',
            name='groups',
            field=models.ManyToManyField(related_name='comp_groups', to='data_structure.DataStructureComponentGroup'),
        ),
        migrations.AddField(
            model_name='datastructurecomponent',
            name='measure_representation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='structure.ConceptScheme'),
        ),
        migrations.AddField(
            model_name='datastructurecomponent',
            name='representation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='structure.Representation'),
        ),
        migrations.AddField(
            model_name='datastructurecomponent',
            name='roles',
            field=models.ManyToManyField(related_name='_datastructurecomponent_roles_+', to='structure.Concept'),
        ),
        migrations.AddField(
            model_name='datastructure',
            name='components',
            field=models.ManyToManyField(to='data_structure.DataStructureComponent'),
        ),
        migrations.AddField(
            model_name='datastructure',
            name='dimension_annotations',
            field=models.ManyToManyField(related_name='_datastructure_dimension_annotations_+', to='common.Annotation'),
        ),
        migrations.AddField(
            model_name='datastructure',
            name='groups',
            field=models.ManyToManyField(to='data_structure.DataStructureComponentGroup'),
        ),
        migrations.AddField(
            model_name='datastructure',
            name='measure_annotations',
            field=models.ManyToManyField(related_name='_datastructure_measure_annotations_+', to='common.Annotation'),
        ),
        migrations.AlterUniqueTogether(
            name='datastructurecomponentbase',
            unique_together=set([('id_code', 'concept')]),
        ),
        migrations.AlterUniqueTogether(
            name='datastructure',
            unique_together=set([('id_code', 'agency', 'version')]),
        ),
    ]
